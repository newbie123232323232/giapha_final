const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');
const { User } = require('../models');
require('dotenv').config();


// ƒêƒÉng k√Ω
const register = async (req, res) => {
  try {
    const { HoTen, Email, MatKhau, NgaySinh, GioiTinh } = req.body;

    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
    const existingUser = await User.findOne({ where: { Email } });
    if (existingUser) {
      return res.status(400).json({ message: 'Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng.' });
    }

    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(MatKhau, 10);

    // T·∫°o ng∆∞·ªùi d√πng
    const newUser = await User.create({
      HoTen,
      Email,
      MatKhau: hashedPassword,
      HashMatKhau: hashedPassword,
      NgaySinh,
      GioiTinh,
    });

    res.status(201).json({ message: 'ƒêƒÉng k√Ω th√†nh c√¥ng.', user: newUser });
  } catch (error) {
    console.error('L·ªói ƒëƒÉng k√Ω:', error);
    res.status(500).json({ message: 'ƒêƒÉng k√Ω th·∫•t b·∫°i.' });
  }
};


// ƒêƒÉng nh·∫≠p
const login = async (req, res) => {
  try {
    const { Email, MatKhau } = req.body;

    const user = await User.findOne({ where: { Email } });
    if (!user) {
      return res.status(401).json({ message: 'Email kh√¥ng t·ªìn t·∫°i.' });
    }

    const passwordMatch = await bcrypt.compare(MatKhau, user.MatKhau);
    if (!passwordMatch) {
      return res.status(401).json({ message: 'Sai m·∫≠t kh·∫©u.' });
    }

    const token = jwt.sign(
      { id: user.ID, email: user.Email, role: user.VaiTro },
      process.env.JWT_SECRET,
      { expiresIn: '1d' }
    );

    res.status(200).json({ message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng.', token, user });
  } catch (error) {
    console.error('L·ªói ƒëƒÉng nh·∫≠p:', error);
    res.status(500).json({ message: 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i.' });
  }
};


// ƒê·ªïi m·∫≠t kh·∫©u
const changePassword = async (req, res) => {
  try {
    const userId = req.user.id;
    const { oldPassword, newPassword, HoTen, Email, NgaySinh, GioiTinh, Avatar } = req.body;

    const user = await User.findByPk(userId);
    if (!user) {
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.' });
    }

    // Ki·ªÉm tra m·∫≠t kh·∫©u c≈©
    const isMatch = await bcrypt.compare(oldPassword, user.MatKhau);
    if (!isMatch) {
      return res.status(401).json({ message: 'M·∫≠t kh·∫©u c≈© kh√¥ng ƒë√∫ng.' });
    }

    // N·∫øu c√≥ m·∫≠t kh·∫©u m·ªõi th√¨ c·∫≠p nh·∫≠t
    if (newPassword) {
      const hashedNewPassword = await bcrypt.hash(newPassword, 10);
      user.MatKhau = hashedNewPassword;
      user.HashMatKhau = hashedNewPassword;
    }

    // C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n n·∫øu c√≥ g·ª≠i l√™n
    if (HoTen !== undefined) user.HoTen = HoTen;
    if (Email !== undefined) user.Email = Email;
    if (NgaySinh !== undefined) user.NgaySinh = NgaySinh;
    if (GioiTinh !== undefined) user.GioiTinh = GioiTinh;
    if (Avatar !== undefined) user.Avatar = Avatar;

    await user.save();

    res.status(200).json({ message: 'C·∫≠p nh·∫≠t th√†nh c√¥ng.' });
  } catch (error) {
    console.error('L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin:', error);
    res.status(500).json({ message: 'C·∫≠p nh·∫≠t th·∫•t b·∫°i.' });
  }
};




const deleteAccount = async (req, res) => {
    try {
      const userId = req.user.id;
      const user = await User.findByPk(userId);
      if (!user) {
        return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.' });
      }
  
      await user.destroy();
      res.status(200).json({ message: 'T√†i kho·∫£n ƒë√£ b·ªã x√≥a.' });
    } catch (error) {
      console.error('L·ªói x√≥a t√†i kho·∫£n:', error);
      res.status(500).json({ message: 'X√≥a t√†i kho·∫£n th·∫•t b·∫°i.' });
    }
  };

// üëá TH√äM m·ªõi: L·∫•y th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i (GET /api/auth/me)
const getCurrentUser = async (req, res) => {
  try {
    const userId = req.user.id;

    const user = await User.findByPk(userId, {
      attributes: { exclude: ['MatKhau', 'HashMatKhau'] }, // ·∫®n m·∫≠t kh·∫©u
    });

    if (!user) {
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i.' });
    }

    res.status(200).json(user);
  } catch (error) {
    console.error('L·ªói khi l·∫•y th√¥ng tin ng∆∞·ªùi d√πng:', error);
    res.status(500).json({ message: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng.' });
  }
};
  

module.exports = {
  register,
  login,
  changePassword,
  deleteAccount,
  getCurrentUser
};
